React -- Megan's notes
* All pieces are reusable components
* Render out components
* Components/things need to be imported into files

// State
* Updates any changes to a components state to all components

// StorePicker.js
* need to import React into all components
* export components so they can be used in other files

// JSX
* not required to write react
* Ex: <p>Hey</p>
* class = className
* Look into using emet
* ASI
* use return (and then write code with indentations)
* Can only return one element (cannot return sibling elements)
* React 16.2 >> allows siblings to be used in <React.Fragment>
* Using comments in JSX, curly brackets mean I am using JS vs. JSX Ex: { /* Comment */ }
* Comments need to go inside elements, you cannot return a comment and element

// Connecting CSS
1. link tag in HTML
2. inline CSS into the component
3. import into index.js

// props
* in HTML attributes provide more information to the tag
* in React these are call props (the way we get data into a component)
* this.props.example
* this = instance
* props = properties/what property
* "just" an object
* each are their own instance

// Stateless functional component
* things like headers don't do anything, they just sit there
* no "this" in a function, it instead gets props (examples 2 and 3)
* 4 is an implict return
* props. is no longer needed in example 6
* different ways of writing the same component
1. class Header extends React.Component { render() { return ( ... )}}
2. function Header(props) { return ( ... )}
3. const Header = (props) => { return ( ... )}
4. const Header = (props) => ( ... )
5. const Header = props => ( ... )
6. const Header = ({ tagline, age }) => ( ... )

// Routing
* not baked into React
* React Router and Next.js
* use push to change page information without reloading (i.e. url)

// Helper Functions
* helpers.js file
* export function ..
* import { function } from "../etc"

// React events
* Synthetic event (to make sure things work across all browsers and devices)
* in JS you would link up event with id in html and js file
* in React you use onClick={this.handleClick} << function, before render() write in function inline
* to not run on page load use handleClick not handleClick()
* not supposed to touch the DOM instead use ref

// Binding in react
* componenetDidMount
* new functions are not bound by default
* creates undefined componenents with bind
1. constructor() { super(); this.goToStore = this.goToStore.bind(this); }
2. goToStore = (event) => { }

// Tips
* $r shows what is clicked on in dev tools
* values of components are connected to state therefore use defaultValue in react not value

// Understanding State
* object that lives inside of a component and all the data that that componenet needs and children need
* "Single source of truth"
* data lives in state
* set initial state in app.js if its a string set it as state = '', number = null, etc.
* don't want to update state directly (mutation)
1. Make a copy
* How does data get anywhere? Props?!

// Fish.js
* add to order click Option 1
handleClick = () => {
  this.props.addToOrder(this.props.index);
};

// Passing State
* Option 1
<Order fishes={this.state.fishes} order={this.state.order}/>
* Option 2 (all things get passed)
<Order {...this.state}/>
* with .reduce(); you always need a starting value
* need a key so React can find it quickly

// Firebase
* Through Google
* Instant database update
in base.js
* Rebase allows mirroring of app and firebase

// Removing items from State
C reate
R ead
U pdate
D elete
